"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[560],{1276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var o=n(7624),i=n(2172);const r={sidebar_position:2},s="Advance Setup",d={id:"setup/advanceSetup",title:"Advance Setup",description:"Make sure you read the core concepts page before setup advance and check if the simple usage is good enough for you.",source:"@site/docs/setup/advanceSetup.md",sourceDirName:"setup",slug:"/setup/advanceSetup",permalink:"/10tap-editor/docs/setup/advanceSetup",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup/advanceSetup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/10tap-editor/docs/setup/installation"},next:{title:"useEditorBridge",permalink:"/10tap-editor/docs/api/useEditorBridge"}},a={},l=[];function c(e){const t={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"advance-setup",children:"Advance Setup"}),"\n",(0,o.jsx)(t.p,{children:"Make sure you read the core concepts page before setup advance and check if the simple usage is good enough for you."}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Create a new folder in your project called ",(0,o.jsx)(t.code,{children:"editor-web"})," - advance setup will let you full control on what running inside the editor webview, so we need to create a spereate folder that will include code that will run inside the webview and will have different build process and tsconfig"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Create ",(0,o.jsx)(t.code,{children:"editor-web/tsconfig.json"}),":"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="vite.config.ts"',children:'{\n  "$schema": "https://json.schemastore.org/tsconfig",\n  "_version": "2.0.0",\n  "compilerOptions": {\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "module": "esnext",\n    "paths": {\n      "@10play/tentap-editor": [\n        "../node_modules/@10play/tentap-editor/lib-web/typescript/webEditorUtils/index.d.ts"\n      ]\n    },\n    "moduleResolution": "bundler",\n    "target": "es2015",\n    "allowJs": true,\n    "allowSyntheticDefaultImports": true,\n    "esModuleInterop": true,\n    "forceConsistentCasingInFileNames": true,\n    "isolatedModules": true,\n    "jsx": "react-jsx",\n    "noEmit": true,\n    "noFallthroughCasesInSwitch": true,\n    "resolveJsonModule": true,\n    "skipLibCheck": true,\n    "strict": true\n  }\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["It's important to configure ",(0,o.jsx)(t.code,{children:"paths"})," so on web types will load from web subfolder and not react-native part types"]}),"\n",(0,o.jsxs)(t.ol,{start:"3",children:["\n",(0,o.jsxs)(t.li,{children:["Add exclude on the root tsconfig.json: ",(0,o.jsx)(t.code,{children:'"exclude": ["./editor-web"]'})]}),"\n",(0,o.jsx)(t.li,{children:"Add index.html AdvancedEditor.tsx and index.tsx:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>RichTextEditor</title>\n  </head>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n    #root > div:nth-of-type(1) {\n      overflow: auto;\n      height: 100%;\n      position: absolute;\n      width: 100%;\n      top: 0;\n      bottom: 0;\n    }\n    #root div .ProseMirror {\n      height: 100%;\n      overflow: auto;\n    }\n    .ProseMirror:focus {\n      outline: none;\n    }\n  </style>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.tsx"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="AdvancedEditor.tsx"',children:"import React from 'react';\nimport { EditorContent } from '@tiptap/react';\nimport { useTenTap, CoreBridge } from '@10play/tentap-editor/web';\nimport Document from '@tiptap/extension-document';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\n\nexport const AdvancedEditor = () => {\n  const editor = useTenTap({\n    bridges: [CoreBridge],\n    tiptapOptions: {\n      extensions: [Document, Paragraph, Text],\n    },\n  });\n  return <EditorContent editor={editor} />;\n};\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="index.tsx"',children:"import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AdvancedEditor } from './AdvancedEditor';\n\n/**\n * This is the entrypoint for the \"web\" part of our editor that will be built with vite\n */\nconst container = document.getElementById('root');\nconst root = createRoot(container!);\nroot.render(<AdvancedEditor />);\n\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"5",children:["\n",(0,o.jsxs)(t.li,{children:["Create bundle config, we use vite, ",(0,o.jsx)(t.code,{children:"yarn add -D vite @vitejs/plugin-react vite-plugin-singlefile"})," here ",(0,o.jsx)(t.code,{children:"vite.config.ts"})," :"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="vite.config.ts"',children:"import { resolve } from 'path';\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { viteSingleFile } from 'vite-plugin-singlefile';\n\n// This config is used to build the web editor into a single file\n\nexport default defineConfig({\n  root: 'src/Examples/Advanced/Editor/',\n  build: {\n    outDir: 'build',\n  },\n  resolve: {\n    alias: [\n      {\n        find: '@10play/tentap-editor',\n        replacement: '@10play/tentap-editor/web',\n      },\n    ],\n  },\n  plugins: [react(), viteSingleFile()],\n  server: {\n    port: 3000,\n  },\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["It's important to have the ",(0,o.jsx)(t.code,{children:"alias"})," configuration so vite will not load react-native code"]}),"\n",(0,o.jsxs)(t.ol,{start:"6",children:["\n",(0,o.jsx)(t.li,{children:"Add scripts on package.json so it will be easy to run/build editor-web:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'    "scripts": {\n        ...\n        "reverse-android": "adb reverse tcp:3000 tcp:3000",\n        "editor:dev": "vite --config ./editor-web/vite.config.ts",\n        "editor:build": "vite --config ./editor-web/vite.config.ts build"\n    }\n'})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"editor:dev"})," - Run the editor web in dev mode\n",(0,o.jsx)(t.code,{children:"editor:build"})," - Build the editor web, probably need to add to your deploy/build process\n",(0,o.jsx)(t.code,{children:"reverse-android"})," - On android need to reverse ports so it will be able to work with DEV / DEV_SERVER_URL props"]}),"\n",(0,o.jsx)(t.p,{children:"You basically done with the advance setup now you have full control of the editor-web you can write your own bridgeExtensions add additional tiptapExtensions"})]})}function p(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>d,M:()=>s});var o=n(1504);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);