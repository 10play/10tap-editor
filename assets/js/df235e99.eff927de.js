"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[640],{5740:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=o(7624),t=o(2172);const r={sidebar_position:1},a="Basic example",s={id:"examples/basic",title:"Basic example",description:"In this example we will be creating a basic editor that contains all of the pre-built plugins, custom styling, custom keyboard and a keyboard aware toolbar. Jump To Full Example",source:"@site/docs/examples/basic.md",sourceDirName:"examples",slug:"/examples/basic",permalink:"/10tap-editor/docs/examples/basic",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/basic.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"EditorBridge",permalink:"/10tap-editor/docs/api/EditorBridge"}},d={},l=[{value:"Creating The Editor Bridge",id:"creating-the-editor-bridge",level:2},{value:"Adding the RichText component",id:"adding-the-richtext-component",level:2},{value:"Adding a KeyboardAware Toolbar and ColorKeyboard",id:"adding-a-keyboardaware-toolbar-and-colorkeyboard",level:2},{value:"Adding Custom CSS and Fonts",id:"adding-custom-css-and-fonts",level:2},{value:"Configuring Placeholder and Link",id:"configuring-placeholder-and-link",level:2},{value:"Full Example",id:"full-example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"basic-example",children:"Basic example"}),"\n",(0,i.jsxs)(n.p,{children:["In this example we will be creating a basic editor that contains all of the pre-built plugins, custom styling, custom keyboard and a keyboard aware toolbar. ",(0,i.jsx)(n.a,{href:"#full-example",children:"Jump To Full Example"})]}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-editor-bridge",children:"Creating The Editor Bridge"}),"\n",(0,i.jsxs)(n.p,{children:["The first thing we want to do is create our EditorBridge #todo add link to editor bridge.\nTo do this we will use the ",(0,i.jsx)(n.code,{children:"useNativeEditor"})," hook in our component"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const editor = useEditorBridge();\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is not enough however as it is just an empty editor with no plugins so let's add some"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"  const editor = useEditorBridge({\n    plugins: [\n      // Here we define all the plugins that we want to use\n      CoreBridge\n      TenTapStartKit,\n      UnderlineBridge,\n      ImageBridge,\n      TaskListBridge,\n      PlaceholderBridge,\n      LinkBridge\n      ColorBridge,\n      HighlightBridge,\n    ],\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now we have added all of the pre-built plugins provided by tentap, and our editor will support all of these plugins features"}),"\n",(0,i.jsx)(n.h2,{id:"adding-the-richtext-component",children:"Adding the RichText component"}),"\n",(0,i.jsx)(n.p,{children:"Now we will add our RichText component, this is simply a WebView that runs a pre-built tiptap bundle with some extensions, that is then communicated with via our plugins (or bridges)"}),"\n",(0,i.jsx)(n.p,{children:"The RichText component receives the EditorBridge we created before"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<SafeAreaView style={exampleStyles.fullScreen}>\n  <RichText editor={editor} />\n</SafeAreaView>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-keyboardaware-toolbar-and-colorkeyboard",children:"Adding a KeyboardAware Toolbar and ColorKeyboard"}),"\n",(0,i.jsx)(n.p,{children:"Our RichText is pretty empty without a toolbar, so let's add it"}),"\n",(0,i.jsx)(n.p,{children:"In order to use the built-in toolbar and custom keyboard we need to create:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A ref on the components container (used on ios for opening the custom keyboard)"}),"\n",(0,i.jsx)(n.li,{children:"A current keyboard state (used inside the toolbar to show and hide the color keyboard)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We will also wrap the entire the toolbar and keyboard in a ",(0,i.jsx)(n.code,{children:"KeyboardAvoidingView"})," to display the toolbar right above the keyboard"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const rootRef = useRef(null);\nconst [activeKeyboard, setActiveKeyboard] = React.useState<string>();\n\nreturn (\n  <SafeAreaView style={exampleStyles.fullScreen} ref={rootRef}>\n    ...\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={exampleStyles.keyboardAvoidingView}\n    >\n      <Toolbar\n        activeKeyboard={activeKeyboard}\n        setActiveKeyboard={setActiveKeyboard}\n        editor={editor}\n        hidden={false}\n      />\n      <CustomKeyboard\n        rootRef={rootRef}\n        activeKeyboardID={activeKeyboard}\n        setActiveKeyboardID={setActiveKeyboard}\n        keyboards={[ColorKeyboard]}\n        editor={editor}\n      />\n    </KeyboardAvoidingView>\n  </SafeAreaView>\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adding-custom-css-and-fonts",children:"Adding Custom CSS and Fonts"}),"\n",(0,i.jsx)(n.p,{children:"Let's add a custom font to our Editor (we can also add custom css)"}),"\n",(0,i.jsx)(n.p,{children:"So first we will define our custom css:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const customFont = `\n  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');\n  * {\n      font-family: 'Roboto', sans-serif;\n  }\n`;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can override a plugins css with the ",(0,i.jsx)(n.code,{children:"configureCSS"})," function. The ",(0,i.jsx)(n.code,{children:"core"})," plugins css is reserved for custom extensions\nso we will configure it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const editor = useEditorBridge({\n    plugins: [\n        // If we want to add custom css - we can configure it here on the core bridge\n        CoreBridge.configureCSS(customFont),\n        TenTapStartKit,\n        ...\n    ],\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:"And that is it!"}),"\n",(0,i.jsx)(n.h2,{id:"configuring-placeholder-and-link",children:"Configuring Placeholder and Link"}),"\n",(0,i.jsxs)(n.p,{children:["Let's also configure the PlaceholderBridge and LinkBridge\nWe can do this with the ",(0,i.jsx)(n.code,{children:"configureExtension"})," function on each Bridge. This can be used to configure any of the TipTaps Extension options"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const editor = useEditorBridge({\n    plugins: [\n        ...,\n        PlaceholderBridge.configureExtension({\n          placeholder: 'Type something...',\n        }),\n        LinkBridge.configureExtension({ openOnClick: false }),\n    ],\n  });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"full-example",children:"Full Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const exampleStyles = StyleSheet.create({\n  fullScreen: {\n    flex: 1,\n  },\n  keyboardAvoidingView: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n});\n\nconst customFont = `\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');\n* {\n  font-family: 'Roboto', sans-serif;\n}\n`;\n\nconst initialContent = `<p>This is a basic <a href=\"https://google.com\">example</a> of implementing images.</p><img src=\"https://source.unsplash.com/8xznAGy4HcY/800x400\" /><p>s</p>`;\n\nexport const BasicExample = () => {\n  const editor = useEditorBridge({\n    autofocus: true,\n    avoidIosKeyboard: true,\n    initialContent,\n    plugins: [\n      // Here we define all the plugins that we want to use\n      CoreBridge.configureCSS(customFont), // If we want to add custom css - we can configure it here on the core bridge\n      TenTapStartKit,\n      UnderlineBridge,\n      ImageBridge,\n      TaskListBridge,\n      PlaceholderBridge.configureExtension({\n        placeholder: 'Type something...',\n      }),\n      LinkBridge.configureExtension({ openOnClick: false }),\n      ColorBridge,\n      HighlightBridge,\n    ],\n  });\n\n  const rootRef = useRef(null);\n  const [activeKeyboard, setActiveKeyboard] = React.useState<string>();\n\n  return (\n    <SafeAreaView style={exampleStyles.fullScreen} ref={rootRef}>\n      <View style={exampleStyles.fullScreen}>\n        <RichText editor={editor} />\n      </View>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={exampleStyles.keyboardAvoidingView}\n      >\n        <Toolbar\n          activeKeyboard={activeKeyboard}\n          setActiveKeyboard={setActiveKeyboard}\n          editor={editor}\n        />\n        <CustomKeyboard\n          rootRef={rootRef}\n          activeKeyboardID={activeKeyboard}\n          setActiveKeyboardID={setActiveKeyboard}\n          keyboards={[ColorKeyboard]}\n          editor={editor}\n        />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2172:(e,n,o)=>{o.d(n,{I:()=>s,M:()=>a});var i=o(1504);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);