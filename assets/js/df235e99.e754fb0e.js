"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[640],{5740:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var n=i(7624),o=i(2172);const a={sidebar_position:1},r="Basic example",d={id:"examples/basic",title:"Basic example",description:"In this example we will be creating a basic editor that contains all of the pre-built bridgeExtensions and a keyboard aware toolbar. Jump To Full Example",source:"@site/docs/examples/basic.md",sourceDirName:"examples",slug:"/examples/basic",permalink:"/10tap-editor/docs/examples/basic",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"useEditorContent",permalink:"/10tap-editor/docs/api/useEditorContent"},next:{title:"Custom CSS and Fonts",permalink:"/10tap-editor/docs/examples/customCss"}},s={},l=[{value:"Creating The Editor Bridge",id:"creating-the-editor-bridge",level:2},{value:"Adding the RichText component",id:"adding-the-richtext-component",level:2},{value:"Adding a Keyboard Aware Toolbar",id:"adding-a-keyboard-aware-toolbar",level:2},{value:"Full Example",id:"full-example",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"basic-example",children:"Basic example"}),"\n",(0,n.jsxs)(t.p,{children:["In this example we will be creating a basic editor that contains all of the pre-built bridgeExtensions and a keyboard aware toolbar. ",(0,n.jsx)(t.a,{href:"#full-example",children:"Jump To Full Example"})]}),"\n",(0,n.jsx)(t.h2,{id:"creating-the-editor-bridge",children:"Creating The Editor Bridge"}),"\n",(0,n.jsxs)(t.p,{children:["The first thing we want to do is create our ",(0,n.jsx)(t.a,{href:"/10tap-editor/docs/api/EditorBridge",children:"EditorBridge"}),".\nTo do this we will use the ",(0,n.jsx)(t.code,{children:"useEditorBridge"})," hook. This by default will contain the ",(0,n.jsx)(t.code,{children:"TenTapStartKit"})," which includes all of ",(0,n.jsx)(t.a,{href:"/10tap-editor/docs/api/BridgeExtensions",children:"the following bridge extensions"}),".\nNow we have added all of the pre-built bridgeExtensions provided by tentap, and our editor will support all of these bridgeExtensions features"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"const editor = useEditorBridge();\n"})}),"\n",(0,n.jsx)(t.p,{children:"This is the same as passing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"const editor = useEditorBridge({\n  bridgeExtensions: TenTapStarterKit,\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"adding-the-richtext-component",children:"Adding the RichText component"}),"\n",(0,n.jsx)(t.p,{children:"Now we will add our RichText component, this is simply a WebView that runs a pre-built tiptap bundle with some extensions, that is then communicated with via our bridgeExtensions"}),"\n",(0,n.jsx)(t.p,{children:"The RichText component receives the EditorBridge we created before"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"<SafeAreaView style={exampleStyles.fullScreen}>\n  <RichText editor={editor} />\n</SafeAreaView>\n"})}),"\n",(0,n.jsx)(t.h2,{id:"adding-a-keyboard-aware-toolbar",children:"Adding a Keyboard Aware Toolbar"}),"\n",(0,n.jsxs)(t.p,{children:["Our RichText is pretty empty without a toolbar, so let's add one\nWe need wrap the entire the toolbar and keyboard in a ",(0,n.jsx)(t.code,{children:"KeyboardAvoidingView"})," to display the toolbar right above the keyboard"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"const exampleStyles = StyleSheet.create({\n  keyboardAvoidingView: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n});\n\n...\n\n<KeyboardAvoidingView\n  behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n  style={exampleStyles.keyboardAvoidingView}\n>\n  <Toolbar editor={editor} />\n</KeyboardAvoidingView>\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["The exact configuration of your KeyboardAvoidingView will differ depending on how you build you app, and you might need to alter the ",(0,n.jsx)(t.code,{children:"keyboardVerticalOffset"})," prop. For an example of this case check out ",(0,n.jsx)(t.a,{href:"/10tap-editor/docs/examples/navHeader",children:"this example"})]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"full-example",children:"Full Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\nimport {\n  SafeAreaView,\n  View,\n  KeyboardAvoidingView,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport { RichText, Toolbar, useEditorBridge } from '@10play/tentap-editor';\n\nexport const Basic = () => {\n  const editor = useEditorBridge({\n    autofocus: true,\n    avoidIosKeyboard: true,\n    initialContent,\n  });\n\n  return (\n    <SafeAreaView style={exampleStyles.fullScreen}>\n      <RichText editor={editor} />\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={exampleStyles.keyboardAvoidingView}\n      >\n        <Toolbar editor={editor} />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst exampleStyles = StyleSheet.create({\n  fullScreen: {\n    flex: 1,\n  },\n  keyboardAvoidingView: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n});\n\nconst initialContent = `<p>This is a basic example!</p>`;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},2172:(e,t,i)=>{i.d(t,{I:()=>d,M:()=>r});var n=i(1504);const o={},a=n.createContext(o);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);